/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoanalisis2017.pkg1;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.util.LinkedList;
import javax.swing.ImageIcon;

/**
 *
 * @author Gianka
 */
public class pnlVentana extends javax.swing.JPanel {

    /**
     * Creates new form pnlCiudad
     */
    private int x1Ciudad;
    private int x2Ciudad;
    private int x1Componente;
    private int x2Componete;
    private int altura;
    private Boolean estaSelecionadoComponente;
    LinkedList<Componente> lstComponente;
    Ciudad ciudad;
    private int idContador;
    private int tipoSeleccionado;
    private int xImgSelecionada;
    private int yImgSelecionada;

    public pnlVentana() {
        initComponents();
        this.idContador = -1;
        this.lstComponente = new LinkedList<>();
        this.xImgSelecionada = 0;
        this.yImgSelecionada = 0;
        this.tipoSeleccionado = 1;
        this.estaSelecionadoComponente = false;
        // crearComponentes();        
        //this.setBackground(Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

        if (evt.getX() > this.x1Componente && evt.getX() < this.x2Componete) {
            for (int i = 0; i < this.lstComponente.size(); i++) {
                if (this.lstComponente.get(i).area.contains(new Point(evt.getX(), evt.getY()))) {
                    this.estaSelecionadoComponente = true;
                    this.tipoSeleccionado = this.lstComponente.get(i).tipo;
                }
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (this.estaSelecionadoComponente) {
            this.xImgSelecionada = evt.getX();
            this.yImgSelecionada = evt.getY();
            repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (this.estaSelecionadoComponente) {
            try {

                this.estaSelecionadoComponente = false;
                this.xImgSelecionada = 0;
                this.yImgSelecionada = 0;
                int auxN = evt.getY() / this.ciudad.altoCampo;
                int auxM = evt.getX() / this.ciudad.anchoCampo;
                this.ciudad.matrizCiudad[auxN][auxM] = this.tipoSeleccionado;
                this.tipoSeleccionado = 1;///__________________________________________________________asAsdasd

            } catch (Exception e) {

            }
            repaint();
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseEntered

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
         pintarComponentes(g);
        if (ciudad != null) {
            // lineas de referencia de las areas de la aplicacion
            g.drawRect(0, 0, this.x2Ciudad, this.altura);
            //g.setColor(Color.red);
            // g.drawRect(this.x1Componente, 0, this.x2Componete - this.x1Componente, this.altura);
            //------Pintar componentes--------

           

            pintarCiudad(g);

            //pinta la anamiacion de colocar imagen en el tablero
            if (this.estaSelecionadoComponente && this.xImgSelecionada > this.x1Ciudad && this.xImgSelecionada < this.x2Ciudad && this.yImgSelecionada > 0 && this.yImgSelecionada < this.altura) {
                g.drawImage(new ImageIcon(getClass().getResource("../ImgComponetes/" + this.tipoSeleccionado + ".png")).getImage(), this.xImgSelecionada, this.yImgSelecionada, 100, 100, this);
                int auxN = this.yImgSelecionada / this.ciudad.altoCampo;
                int auxM = this.xImgSelecionada / this.ciudad.anchoCampo;
                System.out.println(auxN + "--" + auxM);
                g.drawRect(auxM * this.ciudad.anchoCampo, auxN * this.ciudad.altoCampo, this.ciudad.anchoCampo, this.ciudad.altoCampo);
            }
        }
    }

    public void crearComponentes() {
        System.out.println(this.x1Componente);
        int auxAltura=this.altura/18;
        this.lstComponente.add(new Componente(this.idContador++, 1, "../ImgComponetes/1.png", this.x1Componente + 20, this.idContador * auxAltura, 100, auxAltura));
        this.lstComponente.add(new Componente(this.idContador++, 2, "../ImgComponetes/2.png", this.x1Componente + 20, this.idContador * auxAltura, 100, auxAltura));
        this.lstComponente.add(new Componente(this.idContador++, 3, "../ImgComponetes/3.png", this.x1Componente + 20, this.idContador * auxAltura, 100, auxAltura));
        this.lstComponente.add(new Componente(this.idContador++, 4, "../ImgComponetes/4.png", this.x1Componente + 20, this.idContador * auxAltura, 100, auxAltura));
        this.lstComponente.add(new Componente(this.idContador++, 0, "../ImgComponetes/0.png", this.x1Componente + 20, this.idContador * auxAltura, 100, auxAltura));

    }

    public void setX1Ciudad(int x1Ciudad) {
        this.x1Ciudad = x1Ciudad;
    }

    public void setX2Ciudad(int x2Ciudad) {
        this.x2Ciudad = x2Ciudad;
    }

    public void setX1Componente(int x1Componente) {
        this.x1Componente = x1Componente;
    }

    public void setX2Componete(int x2Componete) {
        this.x2Componete = x2Componete;
    }

    public void setAltura(int altura) {
        this.altura = altura;
    }

    private void pintarComponentes(Graphics g) {
        for (int i = 0; i < this.lstComponente.size(); i++) {
            Componente auxComponente = new Componente();
            auxComponente = this.lstComponente.get(i);
            g.drawImage(new ImageIcon(getClass().getResource(auxComponente.ruta)).getImage(), auxComponente.area.x, auxComponente.area.y, auxComponente.area.width, auxComponente.area.height, this);
        }
    }

    public void setCiudad(Ciudad ciudad) {
        this.ciudad = ciudad;
        this.x2Ciudad = this.ciudad.anchoCampo * this.ciudad.n;
        this.x1Componente = this.ciudad.anchoCampo * this.ciudad.n;
        repaint();
    }

    private void pintarCiudad(Graphics g) {
        for (int i = 0; i < this.ciudad.n; i++) {
            for (int j = 0; j < this.ciudad.m; j++) {
                if (this.ciudad.matrizCiudad[i][j] != 0) {
                    g.drawImage(new ImageIcon(getClass().getResource("../ImgComponetes/" + this.ciudad.matrizCiudad[i][j] + ".png")).getImage(), this.ciudad.anchoCampo * j, this.ciudad.altoCampo * i, this.ciudad.anchoCampo, this.ciudad.altoCampo, this);
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
